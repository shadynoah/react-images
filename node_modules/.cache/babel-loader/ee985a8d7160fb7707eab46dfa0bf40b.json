{"ast":null,"code":"const NASA_KEY = process.env.REACT_APP_API_KEY; // Expects a js Date, returns a string in YYYY-MM-DD format\n\nfunction transformDateForAPIRequest(date) {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n\n  if (month < 10) {\n    month = `0${month}`;\n  }\n\n  if (day < 10) {\n    day = `0${day}`;\n  }\n\n  return `${year}-${month}-${day}`;\n}\n\nexport function getNASAPictures(startDate, endDate) {\n  console.log(\"start date is\", startDate);\n  console.log(\"endDate date is\", endDate);\n  return new Promise(async (resolve, reject) => {\n    try {\n      const startDateFormatted = transformDateForAPIRequest(startDate);\n      const endDateFormatted = transformDateForAPIRequest(endDate);\n      const url = `https://api.nasa.gov/planetary/apod?api_key=QQuvcCeXXbHeByBWae6FKvJ6LMeNiNgyelxRdMva\n      &start_date=${startDateFormatted}&end_date=${endDateFormatted}`;\n      const headers = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      await fetch(url, {\n        method: \"GET\",\n        headers\n      }).then(response => {\n        if (response.status >= 200 && response.status < 300) {\n          resolve(response.json());\n        } else {\n          reject(response.json());\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/front-end-assignment-master/src/NasaAPI.js"],"names":["NASA_KEY","process","env","REACT_APP_API_KEY","transformDateForAPIRequest","date","year","getFullYear","month","getMonth","day","getDate","getNASAPictures","startDate","endDate","console","log","Promise","resolve","reject","startDateFormatted","endDateFormatted","url","headers","Headers","fetch","method","then","response","status","json","error"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA7B,C,CAEA;;AACA,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;AACxC,MAAIC,IAAI,GAAGD,IAAI,CAACE,WAAL,EAAX;AACA,MAAIC,KAAK,GAAGH,IAAI,CAACI,QAAL,KAAkB,CAA9B;AACA,MAAIC,GAAG,GAAGL,IAAI,CAACM,OAAL,EAAV;;AACA,MAAIH,KAAK,GAAG,EAAZ,EAAgB;AACdA,IAAAA,KAAK,GAAI,IAAGA,KAAM,EAAlB;AACD;;AACD,MAAIE,GAAG,GAAG,EAAV,EAAc;AACZA,IAAAA,GAAG,GAAI,IAAGA,GAAI,EAAd;AACD;;AACD,SAAQ,GAAEJ,IAAK,IAAGE,KAAM,IAAGE,GAAI,EAA/B;AACD;;AAED,OAAO,SAASE,eAAT,CAAyBC,SAAzB,EAAoCC,OAApC,EAA6C;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,SAA7B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,OAA/B;AACA,SAAO,IAAIG,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI;AACF,YAAMC,kBAAkB,GAAGhB,0BAA0B,CAACS,SAAD,CAArD;AACA,YAAMQ,gBAAgB,GAAGjB,0BAA0B,CAACU,OAAD,CAAnD;AAEA,YAAMQ,GAAG,GAAI;oBACCF,kBAAmB,aAAYC,gBAAiB,EAD9D;AAEA,YAAME,OAAO,GAAG,IAAIC,OAAJ,CAAY;AAC1B,wBAAgB;AADU,OAAZ,CAAhB;AAIA,YAAMC,KAAK,CAACH,GAAD,EAAM;AACfI,QAAAA,MAAM,EAAE,KADO;AAEfH,QAAAA;AAFe,OAAN,CAAL,CAGHI,IAHG,CAGGC,QAAD,IAAc;AACpB,YAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACnDX,UAAAA,OAAO,CAACU,QAAQ,CAACE,IAAT,EAAD,CAAP;AACD,SAFD,MAEO;AACLX,UAAAA,MAAM,CAACS,QAAQ,CAACE,IAAT,EAAD,CAAN;AACD;AACF,OATK,CAAN;AAUD,KApBD,CAoBE,OAAOC,KAAP,EAAc;AACdZ,MAAAA,MAAM,CAACY,KAAD,CAAN;AACD;AACF,GAxBM,CAAP;AAyBD","sourcesContent":["const NASA_KEY = process.env.REACT_APP_API_KEY;\n\n// Expects a js Date, returns a string in YYYY-MM-DD format\nfunction transformDateForAPIRequest(date) {\n  let year = date.getFullYear();\n  let month = date.getMonth() + 1;\n  let day = date.getDate();\n  if (month < 10) {\n    month = `0${month}`;\n  }\n  if (day < 10) {\n    day = `0${day}`;\n  }\n  return `${year}-${month}-${day}`;\n}\n\nexport function getNASAPictures(startDate, endDate) {\n  console.log(\"start date is\", startDate);\n  console.log(\"endDate date is\", endDate);\n  return new Promise(async (resolve, reject) => {\n    try {\n      const startDateFormatted = transformDateForAPIRequest(startDate);\n      const endDateFormatted = transformDateForAPIRequest(endDate);\n\n      const url = `https://api.nasa.gov/planetary/apod?api_key=QQuvcCeXXbHeByBWae6FKvJ6LMeNiNgyelxRdMva\n      &start_date=${startDateFormatted}&end_date=${endDateFormatted}`;\n      const headers = new Headers({\n        \"Content-Type\": \"application/json\",\n      });\n\n      await fetch(url, {\n        method: \"GET\",\n        headers,\n      }).then((response) => {\n        if (response.status >= 200 && response.status < 300) {\n          resolve(response.json());\n        } else {\n          reject(response.json());\n        }\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}